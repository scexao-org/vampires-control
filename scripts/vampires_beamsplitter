#!/usr/bin/env python
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from pathlib import Path
from subprocess import run
import sys
import logging
import time
from logging.handlers import SysLogHandler

from vampires_control.devices.devices import beamsplitter 
from vampires_control.state import VAMPIRES

formatter = "%(asctime)s|%(levelname)s|%(name)s - %(message)s"
logging.basicConfig(
    level=logging.DEBUG, format=formatter, handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("vampires_beamsplitter")
numbers = [pos["number"] for pos in beamsplitter.positions["positions"]]
descriptions = [pos["name"] for pos in beamsplitter.positions["positions"]]

epilog = "positions:\n"
epilog += "\n".join([f"  {i} {d}" for i, d in zip(numbers, descriptions)])

# step 2. define functions for argparse

def move(args):
    beamsplitter.move_position(int(args.position), wait=args.wait)

# def wheel(args):
#     if args.command == "status":
#         cmd = f"conex 8 TP"
#         print("DEBUG: command sent: ", cmd)
#     elif args.command == "home":
#         cmd = f"conex 8 OR"
#         print("DEBUG: command sent: ", cmd)
#     elif args.command == "goto":
#         angle = args.args[0]
#         cmd = f"conex 8 PA {args.angle}"
#         print("DEBUG: command sent: ", cmd)

# step 3. create argument parser
parser = ArgumentParser(
    description="Switch the VAMPIRES beamsplitter optics",
    epilog=epilog,
    formatter_class=RawDescriptionHelpFormatter,
)
parser.add_argument(
    "position", choices=numbers, nargs="?", help="move to the position"
)
parser.add_argument(
    "-w", "--wait", action="store_true", help="block until movement is finished, if applicable"
)
parser.set_defaults(func=move)

# subparsers = parser.add_subparsers(title="wheel commands")

# wheel_parser = subparsers.add_parser("wheel")
# wheel_parser.add_argument("command", choices=["status", "home", "goto"])
# wheel_parser.add_argument("args", nargs="*")


# setp 4. action
if __name__ == "__main__":
    if len(sys.argv) == 1:
        parser.print_help()
    else:
        args = parser.parse_args()
        args.func(args)
